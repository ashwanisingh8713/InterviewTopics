What is a heap?
A heap is a complete binary tree data structure also known as a binary heap that you can construct using an array.

Heaps come in two flavors:
1. Maxheap,inwhichelementswithahighervaluehaveahigher priority.
	The root node will always contain the highest value.
	In MaxHeap, Left Child will be greated than the Right Child
2. Minheap,inwhichelementswithalowervaluehaveahigherpriority.
	The root node will always contain the lowest value.

Note: It’s important to say that the concept of heap is valid for every type of object that can be compared to others of the same type. 

Heaps are indeed binary trees, but you can represent them with a simple array.


Some useful applications of a heap include:
	- Calculating the minimum or maximum element of a collection. 
	- Heap sort.
	- Implementing a priority queue.
	- Supporting graph algorithms, like Prim’s or Dijkstra’s, with a priority queue.


The heap properties imply there must be a way to compare each element. this can be achieved in 2 different ways:
	- T implements the Comparable<T> interface
	- You can provide a Comparator<T> implementation


