OOP Concepts (https://www.scaler.com/topics/java/oops-concepts-in-java/)
	- Obejct
	- Class
	- Inheritance
	- Polymorphism
	- Abstraction  (It is the process of representing the essential features and hiding the implementation details)
	- Encapsulation
	- Coupling
	- Cohesion
	- Association  	(Association represents HAS-A relationship)
	- Aggregation	(one class object depends on the object of another class, It is one-way relationship)
	- Composition	(It is a restricted form of aggregation. It is done by creating an instance variable that refers to another object.)
					In our example, we had created a class "Plane" which had a derived class called "Jet". Here Jet had the attributes defined in the base class Plane. If we delete the Plane class object, the Jet class object also gets deleted as the Jet class was dependent on the Plane class.


	Both Composition and Aggregation are types of association which are used to represent the relationship between two classes. But they are absolutely different from each other. 
	Aggregation relation is “has-a” and composition is “part-of” relation.
	Composition is a strong Association whereas Aggregation is a weak Association.




->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->

Solid Principle (https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/)
	- Single Responsibility 
	- Open-Closed
	- Liskov Subtitution 	( Subclasses shuould be substitable for thier base classes)
	- Interface Segregation	( Many client specific interfaces are better than general-purposed interface)
	- Dependency Inversion	( Class should depend on interface or abstract class intead of concrete classes and functions)

->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->->

Clean Arch (https://proandroiddev.com/clean-architecture-data-flow-dependency-rule-615ffdd79e29)
	App
		- UI
		- Presenter
		- ViewModel
	Data 
		- Repository Implementation
		- DataSources
		- Data Mapper
	Domain
		- It contains generic classes
		- Entity of sources
		- Business Logics
		- Usecases
		- Abstractions
		- Repository Interfaces

